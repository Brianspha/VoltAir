/*
 * Copyright (C) 2014 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef CONTROLLEREVENT_H
#define CONTROLLEREVENT_H

#include <map>
#include "KeyCodes.h"
#include "JoystickAxisCodes.h"
#include "TriggerAxisCodes.h"

/**
 * @ingroup GameInput
 * @brief A platform independent event generated by controller device.
 *
 * This event can represent input events from any type of controller without respect to platform.
 *
 * @note The event represents *changes* in the state of the controller, and not necessarily the
 * current state of the full controller.
 */
class ControllerEvent {
public:
    /**
     * @brief Map of keys to their changes in pressed state.
     */
    typedef std::map<KeyCode, bool> KeyStates;
    /**
     * @brief Map of joystick axes to their changes in <tt>[-1.0f, 1.0f]</tt> axis value.
     */
    typedef std::map<JoystickAxisCode, float> JoystickAxisStates;
    /**
     * @brief Map of trigger axes to their changes in <tt>[0.0f, 1.0f]</tt> axis value.
     */
    typedef std::map<TriggerAxisCode, float> TriggerAxisStates;

    /**
     * @brief Constructs a ControllerEvent for a controller identified by the specified @p deviceId.
     * @param deviceId Id that uniquely identifies a controller
     */
    ControllerEvent(int deviceId = -1);

    // Needed to make a full polymorphic definition of ControllerEvent.
    virtual ~ControllerEvent();

    /**
     * @brief Returns whether or not this ControllerEvent has a valid (non-zero) deviceId.
     */
    bool hasDeviceId() const { return mDeviceId >= 0; }
    /**
     * @brief Returns the deviceId for this ControllerEvent, or a negative number if it is
     * "deviceless".
     */
    int getDeviceId() const { return mDeviceId; }
    /**
     * @brief Sets the @p deviceId for this ControllerEvent.
     */
    void setDeviceId(int deviceId) { mDeviceId = deviceId; }

    /**
     * @brief Returns whether or not this ControllerEvent contains any key press information.
     */
    bool hasKeyInfo() const { return !mKeyStates.empty(); }
    /**
     * @brief Returns whether or not this ControllerEvent contains any key press information for
     * the specified key.
     * @param keyCode Code of key to query for presence of pressed state information
     */
    bool hasKeyInfo(const KeyCode& keyCode) const { return mKeyStates.count(keyCode) > 0; }
    /**
     * @brief Returns whether or not the specified key is pressed.
     * @param keyCode Code of key to query for pressed state information
     */
    bool isKeyPressed(const KeyCode& keyCode) const;
    /**
     * @brief Returns pressed state changes for all keys contained in this event.
     */
    const KeyStates& getKeyStates() const { return mKeyStates; }
    /**
     * @brief Sets whether or not the key has been pressed or released.
     * @param keyCode Code of key whose state has changed
     * @param isPressed Whether or the key is pressed
     */
    void setKeyState(const KeyCode& keyCode, bool isPressed) { mKeyStates[keyCode] = isPressed; }

    /**
     * @brief Returns whether or not this ControllerEvent contains any axis information for
     * the specified joystick axis.
     */
    bool hasJoystickAxisInfo() const { return !mJoystickAxisStates.empty(); }
    /**
     * @brief Returns whether or not this ControllerEvent contains any axis information.
     * @param axis Code of the joystick axis to query for presence of axis information
     */
    bool hasJoystickAxisInfo(const JoystickAxisCode& axis) const {
        return mJoystickAxisStates.count(axis) > 0;
    }
    /**
     * @brief Returns the <tt>[-1.0f, 1.0f]</tt> axis value for the specified joystick axis.
     * @param axis Code of the joystick axis to query for axis value
     */
    float getJoystickAxisValue(const JoystickAxisCode& axis) const;
    /**
     * @brief Returns joystick axis value changes for all joystick axes contained in this event.
     */
    const JoystickAxisStates& getJoystickAxisStates() const { return mJoystickAxisStates; }
    /**
     * @brief Sets the <tt>[-1.0f, 1.0f]</tt>joystick axis value for the specified joystick axis.
     * @param axis Code of joystick axis whose state has changed
     * @param value <tt>[-1.0f, 1.0f]</tt> new axis value
     */
    void setJoystickAxisValue(const JoystickAxisCode& axis, float value);

    /**
     * @brief Returns whether or not this ControllerEvent contains any axis information for
     * the specified trigger axis.
     */
    bool hasTriggerAxisInfo() const { return !mTriggerAxisStates.empty(); }
    /**
     * @brief Returns the <tt>[0.0, 1.0]</tt> axis value for the specified trigger axis.
     * @param axis Code of the trigger axis to query for axis value
     */
    bool hasTriggerAxisInfo(const TriggerAxisCode& axis) const {
        return mTriggerAxisStates.count(axis) > 0;
    }
    /**
     * @brief Returns the <tt>[0.0, 1.0]</tt> axis value for the specified trigger axis.
     * @param axis Code of the trigger axis to query for axis value
     */
    float getTriggerAxisValue(const TriggerAxisCode& axis) const;
    /**
     * @brief Returns trigger axis value changes for all trigger axes contained in this event.
     */
    const TriggerAxisStates& getTriggerAxisStates() const { return mTriggerAxisStates; }
    /**
     * @brief Sets the <tt>[0.0, 1.0]</tt> trigger axis value for the specified trigger axis.
     * @param axis Code of trigger axis whose state has changed
     * @param value <tt>[0.0, 1.0]</tt> new axis value
     */
    void setTriggerAxisValue(const TriggerAxisCode& axis, float value);

private:
    int mDeviceId;
    KeyStates mKeyStates;
    JoystickAxisStates mJoystickAxisStates;
    TriggerAxisStates mTriggerAxisStates;
};

#endif // CONTROLLEREVENT_H
